function haveAllItemsLess(array) {
  const maxId = array.reduce((max, itemId) => {
    const number = parseInt(itemId.replace('cid', ''), 10);
    return number > max ? number : max;
  }, 0);

  for (let i = 1; i < maxId; i++) {
    const currentItem = 'cid' + i;
    if (!array.includes(currentItem)) {
      return false;
    }
  }
const missingString = originalArray.find(item => !modifiedArray.includes(item));
  return true;
}

const refreshPageWithoutQueryParams = () => {
    // Reload the page
    window.location.reload();

    // Remove query parameters by setting an empty string
    window.history.replaceState({}, document.title, window.location.pathname);
  };

function formatPrice(priceString) {
  // Convert the string to a number and round to two decimal places
  const price = parseFloat(priceString).toFixed(2);

  // Add commas for thousand separators
  const formattedPrice = price.replace(/\B(?=(\d{3})+(?!\d))/g, ',');

  return formattedPrice;
}

document.addEventListener('DOMContentLoaded', function () {
      $('.chosen-select').chosen();
    });
 <div className="dropdown">
              <button className="purple-button">
                {selectedOption || 'Select an option'}
              </button>
              <div className="dropdown-content">
                <select onChange={handleOptionChange}>
                  <option value="" disabled>
                    Select an option
                  </option>
                  <option value="page1">Page 1</option>
                  <option value="page2">Page 2</option>
                  {/* Add more options as needed */}
                </select>
              </div>
            </div>
.purple-button {
  background-color: purple;
  color: white;
  border: none;
  border-radius: 8px;
  padding: 10px 15px;
  cursor: pointer;
}

/* Example styles for the dropdown container */
.dropdown {
  position: relative;
  display: inline-block;
}

/* Example styles for the dropdown content */
.dropdown-content {
  display: none;
  position: absolute;
  background-color: #f9f9f9;
  min-width: 160px;
  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
  z-index: 1;
}

/* Example styles for the dropdown options */
.dropdown-content select {
  width: 100%;
  padding: 8px;
  border: none;
  border-bottom: 1px solid #ddd;
  box-sizing: border-box;
  background-color: #f9f9f9;
  color: black;
  cursor: pointer;
}

/* Show the dropdown content when the button is clicked */
.dropdown:hover .dropdown-content {
  display: block;
}
printWindow.onload = () => {
      printWindow.print();
    };
import React from 'react';

const PrintIframe = () => {
  const handlePrint = () => {
    const printWindow = window.open('', '_blank');
    
    // Assuming your document URL is 'https://example.com/document-url'
    printWindow.document.write('<iframe src="https://example.com/document-url" onload="window.print()" style="width:100%; height:100vh;"></iframe>');
  };

  return (
    <div>
      <button onClick={handlePrint}>Print Document</button>
    </div>
  );
};

export default PrintIframe;

import React, { useState } from 'react';

const PrintIframe = () => {
  const [isPrintModalOpen, setIsPrintModalOpen] = useState(false);

  const handlePrint = () => {
    setIsPrintModalOpen(true);
  };

  const handleClosePrintModal = () => {
    setIsPrintModalOpen(false);
  };

  return (
    <div>
      <button onClick={handlePrint}>Print Document</button>

      {isPrintModalOpen && (
        <div className="print-modal">
          <div className="print-modal-content">
            <button onClick={handleClosePrintModal}>Close</button>
            <iframe
              title="Print View"
              src="https://example.com/document-url"
              style={{ width: '100%', height: '80vh', border: 'none' }}
            />
          </div>
        </div>
      )}
    </div>
  );
};

export default PrintIframe;

import React from 'react';

const PrintButton = ({ byteArray }) => {
  const handlePrint = () => {
    // Create a Blob from the byte array
    const blob = new Blob([byteArray], { type: 'application/pdf' });

    // Create a data URL for the Blob
    const dataUrl = URL.createObjectURL(blob);

    // Create a hidden iframe
    const iframe = document.createElement('iframe');
    iframe.style.display = 'none';
    document.body.appendChild(iframe);

    // Set the source of the iframe to the data URL
    iframe.src = dataUrl;

    // When the iframe is loaded, trigger the print dialog
    iframe.onload = () => {
      iframe.contentWindow.print();
    };
  };

  return (
    <div>
      <button onClick={handlePrint}>Print PDF</button>
    </div>
  );
};

export default PrintButton;

const pathArray = new URL(url).pathname.split("/");

// Get the last path value
const lastPath = pathArray[pathArray.length - 1];

